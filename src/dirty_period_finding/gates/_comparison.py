# -*- coding: utf-8 -*-

# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import unicode_literals

from dirty_period_finding.extensions import (
    BasicSizedMathGateEx,
    SelfInverseGateEx,
)


def _carry_signals(x, y):
    """
    Args:
        x (int): A summand.
        y (int): The other summand.

    Returns:
        int:
            A bitmask with each bit corresponding to whether adding y into x
            (or vice versa) triggered a carry at each bit position.
    """
    return ((x + y) ^ x ^ y) >> 1


class XorOffsetCarrySignalsGate(BasicSizedMathGateEx, SelfInverseGateEx):
    """
    Takes a constant offset, a query register, and a target register.

    Predicts the carries generated by adding the offset into the query, and
    XORs those carry signals into the target.
    """
    def __init__(self, offset):
        if offset < 0:
            raise ValueError('Negative offset')
        BasicSizedMathGateEx.__init__(self)
        SelfInverseGateEx.__init__(self)
        self.offset = offset

    def do_operation(self, sizes, args):
        assert len(sizes) == 2
        assert len(args) == 2
        assert sizes[0] == sizes[1]

        return args[0], args[1] ^ _carry_signals(args[0], self.offset)

    def __eq__(self, other):
        return (isinstance(other, XorOffsetCarrySignalsGate) and
                self.offset == other.offset)

    def __hash__(self):
        return hash((XorOffsetCarrySignalsGate, self.offset))

    def __repr__(self):
        return 'XorOffsetCarrySignalsGate(offset={})'.format(self.offset)

    def __str__(self):
        return repr(self)

    def ascii_register_labels(self):
        return ['A', '⊕carries(A, {})'.format(self.offset)]

    def sanity_check(self, registers):
        assert len(registers) == 2
        assert len(registers[0]) == len(registers[1])
        assert self.offset < 1 << len(registers[1])


class PredictOffsetOverflowGate(BasicSizedMathGateEx, SelfInverseGateEx):
    """
    Takes a constant offset, a query register, and a target bit.

    Predicts whether adding the offset into the query would overflow its
    register, and if so then toggles the target bit.
    """
    def __init__(self, offset):
        if offset < 0:
            raise ValueError('Negative offset')
        BasicSizedMathGateEx.__init__(self)
        SelfInverseGateEx.__init__(self)
        self.offset = offset

    def do_operation(self, sizes, args):
        assert len(sizes) == 2
        assert len(args) == 2
        assert sizes[1] == 1
        v = args[0]
        m = ~0 << sizes[0]
        b = (v + self.offset) & m
        return v, args[1] ^ (1 if b else 0)

    def __eq__(self, other):
        return (isinstance(other, PredictOffsetOverflowGate) and
                self.offset == other.offset)

    def __hash__(self):
        return hash((PredictOffsetOverflowGate, self.offset))

    def __repr__(self):
        return 'PredictOffsetOverflowGate(offset={})'.format(self.offset)

    def __str__(self):
        return repr(self)

    def ascii_register_labels(self):
        return ['A', '⊕overflow(A+={})'.format(self.offset)]

    def sanity_check(self, registers):
        assert len(registers) == 2
        assert len(registers[1]) == 1
        assert self.offset < 1 << len(registers[0])


class LessThanConstantGate(BasicSizedMathGateEx, SelfInverseGateEx):
    """
    Takes a constant comparand, a query register, and a target bit.

    Toggles the target when the query is less than the comparand.
    """
    def __init__(self, comparand):
        BasicSizedMathGateEx.__init__(self)
        SelfInverseGateEx.__init__(self)
        self.comparand = comparand

    def do_operation(self, sizes, args):
        assert len(sizes) == 2
        assert len(args) == 2
        assert sizes[1] == 1
        return args[0], args[1] ^ (1 if args[0] < self.comparand else 0)

    def __eq__(self, other):
        return (isinstance(other, LessThanConstantGate) and
                self.comparand == other.comparand)

    def __hash__(self):
        return hash((LessThanConstantGate, self.comparand))

    def __repr__(self):
        return 'LessThanConstantGate({})'.format(self.comparand)

    def __str__(self):
        return repr(self)

    def ascii_register_labels(self):
        return ['A', '⊕A<{}'.format(self.comparand)]
